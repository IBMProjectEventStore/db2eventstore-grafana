{"version":3,"sources":["../src/datasource.js"],"names":["_","EventStoreDatasource","instanceSettings","$q","backendSrv","templateSrv","api","namespace","databaseField","undefined","databaseParameter","jsonData","selectedDatabase","securityToken","type","endsWith","url","grafanaURL","apiURL","name","q","headers","options","query","buildQueryParameters","targets","filter","t","hide","length","refId","when","data","doRequest","method","then","response","catch","error","console","log","status","message","title","replace","annotation","annotationQuery","range","datasource","enable","iconColor","rangeRaw","result","interpolated","target","mapToTextValue","callback","scope","parameter","queryParameter","map","d","i","text","value","isObject","withCredentials","datasourceRequest","scopedVars","select","selectedColumn","from","selectedTable","ts","selectedTimestamp","readOption","queryType"],"mappings":"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","file":"datasource.js","sourcesContent":["import _ from \"lodash\";\n\nexport class EventStoreDatasource {\n\n  constructor(instanceSettings, $q, backendSrv, templateSrv) {\n    var api = 'com/ibm/event/api/v1';\n    var namespace = api + '/grafana';\n    var databaseField = '?databaseName=';\n\n    /**\n     * Capture the settings information from the Data Source panel\n     */\n    if (instanceSettings !== undefined) {\n      this.databaseParameter = databaseField + instanceSettings.jsonData.selectedDatabase;\n      this.securityToken = instanceSettings.jsonData.securityToken;\n      this.type = instanceSettings.type;\n      if (_.endsWith(instanceSettings.jsonData.url, '/')) {\n        this.grafanaURL = instanceSettings.jsonData.url + namespace;\n        this.apiURL = instanceSettings.jsonData.url + api;\n      } else {\n        this.grafanaURL = instanceSettings.jsonData.url + '/' + namespace;\n        this.apiURL = instanceSettings.jsonData.url + '/' + api;\n      }\n      this.name = instanceSettings.name;\n    }\n\n    this.q = $q;\n    this.backendSrv = backendSrv;\n    this.templateSrv = templateSrv;\n    this.headers = {\n      'Authorization': instanceSettings.jsonData.securityToken,\n      'cache-control': 'no-cache',\n      'content-type': 'application/json'\n    };\n  }\n\n  /**\n   * Send a query to the REST Server\n   */\n  query(options) {\n    var query = this.buildQueryParameters(options);\n    query.targets = query.targets.filter(t => !t.hide);\n\n    if (query.targets.length <= 0 || query.targets[0].refId === undefined) {\n      return this.q.when({\n        data: []\n      });\n    }\n\n    return this.doRequest({\n      url: this.grafanaURL + '/query' + this.databaseParameter,\n      data: query,\n      method: 'POST'\n    })\n    .then(function (response) {\n      return response.data;\n    })\n    .catch(function (error) {\n      console.log(error);\n    });\n  }\n\n  /**\n   * Test Connection\n   */\n  testDatasource() {\n    return this.doRequest({\n      url: this.grafanaURL + '/',\n      method: 'GET',\n    }).then(response => {\n      if (response.status === 200) {\n        return {\n          status: \"success\",\n          message: \"IBM Db2 Event Store Data source is working\",\n          title: \"Success\"\n        };\n      }\n    });\n  }\n\n  annotationQuery(options) {\n    var query = this.templateSrv.replace(options.annotation.query, {}, 'glob');\n    var annotationQuery = {\n      range: options.range,\n      annotation: {\n        name: options.annotation.name,\n        datasource: options.annotation.datasource,\n        enable: options.annotation.enable,\n        iconColor: options.annotation.iconColor,\n        query: query\n      },\n      rangeRaw: options.rangeRaw\n    };\n\n    return this.doRequest({\n      url: this.url + '/annotations',\n      method: 'POST',\n      data: annotationQuery\n    }).then(result => {\n      return result.data;\n    });\n  }\n\n  metricFindQuery(query) {\n    var interpolated = {\n      target: this.templateSrv.replace(query, null, 'regex')\n    };\n\n    return this.doRequest({\n      url: this.url + '/search',\n      data: interpolated,\n      method: 'POST',\n    }).then(this.mapToTextValue);\n  }\n\n  /**\n   * Common API to get all information from IBM Db2 Event Store\n   */\n  metricAPIQuery(api, callback, scope, parameter) {\n    var queryParameter = this.databaseParameter;\n    if (parameter !== undefined) {\n      queryParameter += '&' + parameter;\n    }\n    return this.doRequest({\n      url: this.apiURL + api + queryParameter,\n      method: 'GET',\n    })\n    .then(function (response) {\n      callback(response.data.data, scope);\n    })\n    .catch(function (error) {\n      console.log(error);\n    });\n  }\n\n  mapToTextValue(result) {\n    return _.map(result.data, (d, i) => {\n      if (d && d.text && d.value) {\n        return {\n          text: d.text,\n          value: d.value\n        };\n      } else if (_.isObject(d)) {\n        return {\n          text: d,\n          value: i\n        };\n      }\n      return {\n        text: d,\n        value: d\n      };\n    });\n  }\n\n  doRequest(options) {\n    options.withCredentials = this.withCredentials;\n    options.headers = this.headers;\n\n    return this.backendSrv.datasourceRequest(options);\n  }\n\n  buildQueryParameters(options) {\n    //remove placeholder targets\n  //  options.targets = _.filter(options.targets, target => {\n  //    return target.target !== 'select metric';\n  //  });\n\n    var targets = _.map(options.targets, target => {\n      return {\n        target: this.templateSrv.replace(target.target, options.scopedVars, 'regex'),\n        refId: target.refId,\n        select: target.selectedColumn,\n        from: target.selectedTable,\n        selectedTable: target.selectedTable,\n        ts: target.selectedTimestamp,\n        readOption: target.readOption,\n        queryType: target.type || 'timeseries'\n      };\n    });\n\n    options.targets = targets;\n\n    return options;\n  }\n}\n"]}