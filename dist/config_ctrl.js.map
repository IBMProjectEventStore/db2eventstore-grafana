{"version":3,"sources":["../src/config_ctrl.js"],"names":["_","axios","EventStoreConfigCtrl","$scope","scope","current","jsonData","url","user","password","selectedDatabase","databases","name","value","securityToken","headerConfig","headers","username","stringToEncode","auth","window","btoa","console","log","data","outerScope","method","then","response","token","_getDatabasesList","catch","error","database","count","s","$apply","db","push","startsWith","_retrieveBearerToken","_assignBearerToken","templateUrl"],"mappings":"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","file":"config_ctrl.js","sourcesContent":["import _ from \"lodash\";\nimport axios from './axios';\n\n/**\n * Data Source panel configuration\n */\nexport class EventStoreConfigCtrl {\n\n  /** @ngInject */\n  constructor($scope) {\n    this.scope = $scope;\n\n    this.current.jsonData = this.current.jsonData || {};\n    this.current.jsonData.url = this.current.jsonData.url || \"http://localhost:3020\";\n    this.current.jsonData.user = this.current.jsonData.user || \"admin\";\n    this.current.jsonData.password = this.current.jsonData.password || \"password\";\n    this.current.jsonData.selectedDatabase = this.current.jsonData.selectedDatabase || 0;\n    this.current.jsonData.databases = this.current.jsonData.databases || { name: 'Select a Database', value: 0 };\n    this.current.jsonData.securityToken = this.current.jsonData.securityToken || null;\n    this.current.jsonData.headerConfig = this.current.jsonData.headerConfig || {\n      headers: {\n        'cache-control': 'no-cache',\n        'content-type': 'application/json'\n      }\n    };\n  }\n\n  /**\n   * Retrieve the Bearer Token to be used for all further requests with the server\n   */\n  _retrieveBearerToken() {\n    var username = this.current.jsonData.user;\n    var password = this.current.jsonData.password;\n    var url = this.current.jsonData.url\n    var stringToEncode = username + \":\" + password\n    var auth = \"Basic \" + window.btoa(stringToEncode);\n    console.log('Getting the Platform Bearer Token')\n    console.log('====================================================')\n    console.log(url + '/com/ibm/event/api/v1/init/user')\n\n    var data = { username: username, password: password };\n    var outerScope = this;\n\n    axios({\n      method: 'post',\n      url: url + '/com/ibm/event/api/v1/init/user',\n      data: data\n      })\n    .then(function (response) {\n      var token = response.data.token\n      console.log('Token successfully retrieved:')\n      console.log('====================================================')\n      console.log(token)\n      console.log('====================================================')\n      console.log('')\n      outerScope.current.jsonData.securityToken = 'bearer ' + token\n      outerScope.current.jsonData.headerConfig.headers['Authorization'] = outerScope.current.jsonData.securityToken\n      outerScope._getDatabasesList()\n    })\n    .catch(function (error) {\n      console.log(error);\n    });\n  }\n\n  /**\n   * If the address is http, add a sample token to remain compatible\n   */\n  _assignBearerToken() {\n    var outerScope = this;\n    outerScope.current.jsonData.securityToken = 'bearer token'\n    outerScope.current.jsonData.headerConfig.headers['Authorization'] = outerScope.current.jsonData.securityToken\n    outerScope._getDatabasesList()\n  }\n\n  /**\n   * Get and populate the database list\n   */\n  _getDatabasesList () {\n    var outerScope = this;\n    axios({\n      url: this.current.jsonData.url + '/com/ibm/event/api/v1/oltp/databases',\n      method: 'get',\n      headers: this.current.jsonData.headerConfig.headers\n    })\n    .then(function (response) {\n      outerScope.current.jsonData.databases = [];\n      var database;\n      var count = 0;\n      var s = outerScope;\n      /**\n       * Wrap in scope, in order to make sure ng-options is properly updated, since the Array is directly populated.\n       */\n      outerScope.scope.$apply(function() {\n        for (database in response.data.data) {\n          var db = response.data.data[database];\n          s.current.jsonData.databases.push ({name: db.name, value: count});\n          s.current.jsonData.selectedDatabase = count;\n          count++;\n        }\n      });\n    })\n    .catch(function (error) {\n      console.log(error);\n    });\n  }\n\n  /**\n   * Retrieve the list of Databases currently managed by the store\n   */\n  populateDatabases() {\n    if (_.startsWith(this.current.jsonData.url, 'https')) {\n      this._retrieveBearerToken();\n    }\n    else {\n      this._assignBearerToken();\n    }\n  }\n}\n\nEventStoreConfigCtrl.templateUrl = 'partials/config.html';\n"]}