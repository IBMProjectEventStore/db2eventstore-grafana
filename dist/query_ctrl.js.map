{"version":3,"sources":["../src/query_ctrl.js"],"names":["QueryCtrl","EventStoreQueryCtrl","$scope","$injector","scope","target","selectedTable","equalPredicate","equalPredicateValue","selectedColumn","queryString","selectedTimestamp","readOption","tables","columns","type","resultFormats","name","value","readOptions","datasource","metricAPIQuery","displayTables","table","t","push","refresh","displayColumns","column","c","query","metricFindQuery","rawQuery","panelCtrl","templateUrl"],"mappings":"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","file":"query_ctrl.js","sourcesContent":["import {QueryCtrl} from 'app/plugins/sdk';\nimport './css/query-editor.css!'\n\nexport class EventStoreQueryCtrl extends QueryCtrl {\n\n  constructor($scope, $injector)  {\n    super($scope, $injector);\n\n    this.scope = $scope;\n    this.target.selectedTable = this.target.selectedTable || null;\n    this.target.equalPredicate = this.target.equalPredicate  || null;\n    this.target.equalPredicateValue = this.target.equalPredicateValue  || null;\n    this.target.selectedColumn = this.target.selectedColumn || null;\n    this.target.queryString = this.target.queryString || null;\n    this.target.selectedTimestamp = this.target.selectedTimestamp || null;\n    this.target.readOption = this.target.readOption || 'SnapshotAny';\n    this.target.tables = this.target.tables || [];\n    this.target.columns = this.target.columns || [];\n    this.target.target = this.target.target || 'select metric';\n    this.target.type = this.target.type || 'timeseries';\n    this.target.resultFormats = [{ name: 'Time series', value: 'time_series' }, { name: 'Table', value: 'table' }];\n    this.target.readOptions = [{name: 'SnapshotAny', value: 'SnapshotAny'}, {name: 'SnapshotNow', value: 'SnapshotNow'}, {name: 'SnapshotNone', value: 'SnapshotNone'}];\n    this.datasource.metricAPIQuery('/oltp/tables', this.displayTables, this);\n  }\n\n  displayTables (tables, scope) {\n    var table;\n    for (table in tables) {\n      var t = tables[table];\n      scope.target.tables.push ({name: t.name, value: t.name});\n    }\n  }\n\n  onTableSelected () {\n    this.refresh();\n    this.datasource.metricAPIQuery('/oltp/table/columns', this.displayColumns, this, 'tableName=' + this.target.selectedTable);\n  }\n\n  displayColumns (columns, scope) {\n    var column;\n    for (column in columns) {\n      var c = columns[column];\n      scope.target.columns.push ({name: c.name, value: c.name});\n    }\n  }\n\n  onColumnSelected () {\n  }\n\n  getOptions(query) {\n    return this.datasource.metricFindQuery(query || '');\n  }\n\n  toggleEditorMode() {\n    this.target.rawQuery = !this.target.rawQuery;\n  }\n\n  onChangeInternal() {\n    this.panelCtrl.refresh(); // Asks the panel to refresh data.\n  }\n\n  getCollapsedText() {\n    this.target.queryString = 'SELECT ' + this.target.selectedColumn + ' FROM ' + this.target.selectedTable;\n    return this.target.queryString;\n  }\n}\n\nEventStoreQueryCtrl.templateUrl = 'partials/query.editor.html';\n"]}